-- ствоерення таблиць

CREATE TABLE "users" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "name" varchar,
  "email" varchar UNIQUE
);

CREATE TABLE "residential_objects" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "user_id" int NOT NULL,
  "address" varchar UNIQUE,
  "gas_consumption_per_month" int,
  "water_consumption_per_month" int,
  "electricity_consumption_per_month" int
);

CREATE TABLE "services" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "name" varchar UNIQUE
);

CREATE TABLE "tariffs" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "service_id" int NOT NULL,
  "supplier_id" int NOT NULL,
  "price" decimal
);

CREATE TABLE "payments" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "user_id" int NOT NULL,
  "residential_id" int NOT NULL,
  "service_id" int NOT NULL,
  "amount" decimal,
  "payment_method" varchar,
  "status" varchar,
  "payment_date" timestamp
);

CREATE TABLE "suppliers" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "name" varchar UNIQUE
);

ALTER TABLE "residential_objects" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "tariffs" ADD FOREIGN KEY ("service_id") REFERENCES "services" ("id");

ALTER TABLE "tariffs" ADD FOREIGN KEY ("supplier_id") REFERENCES "suppliers" ("id");

ALTER TABLE "payments" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "payments" ADD FOREIGN KEY ("residential_id") REFERENCES "residential_objects" ("id");

ALTER TABLE "payments" ADD FOREIGN KEY ("service_id") REFERENCES "services" ("id");

-- заповнення таблиць
INSERT INTO users (name, email) VALUES
('John Smith', 'john.smith@example.com'),
('Emily Johnson', 'emily.johnson@example.com'),
('Michael Brown', 'michael.brown@example.com'),
('Sarah Davis', 'sarah.davis@example.com'),
('David Wilson', 'david.wilson@example.com');

INSERT INTO residential_objects (user_id, address, gas_consumption_per_month, water_consumption_per_month, electricity_consumption_per_month) 
VALUES
(1, '123 Main St, New York, NY', 50, 30, 200),  
(2, '456 Oak Ave, Los Angeles, CA', 40, 25, 180),  
(3, '789 Pine Rd, Chicago, IL', 60, 35, 220),  
(4, '101 Maple St, Houston, TX', 55, 28, 190),  
(5, '202 Cedar Ln, Miami, FL', 45, 22, 170);  

INSERT INTO services (name) VALUES
('Gas'),
('Water'),
('Electricity'),
('Internet'),
('Heating');

INSERT INTO suppliers (name) VALUES
('EnergyCorp'),
('AquaSupply'),
('PowerGrid'),
('FastNet'),
('HeatCo');

INSERT INTO tariffs (service_id, supplier_id, price) 
VALUES
(1, 1, 1.20),  
(2, 2, 0.80),  
(3, 3, 0.15),  
(4, 4, 25.00), 
(5, 5, 2.50);  

INSERT INTO payments (user_id, residential_id, service_id, amount, payment_method, status, payment_date)
VALUES
(1, 1, 1, 50 * (SELECT price FROM tariffs WHERE service_id = 1), 'Credit Card', 'Paid', NOW()),  
(2, 2, 2, 25 * (SELECT price FROM tariffs WHERE service_id = 2), 'PayPal', 'Pending', NOW()),  
(3, 3, 3, 220 * (SELECT price FROM tariffs WHERE service_id = 3), 'Bank Transfer', 'Paid', NOW()),  
(4, 4, 4, 1 * (SELECT price FROM tariffs WHERE service_id = 4), 'Credit Card', 'Pending', NOW()),  
(5, 5, 5, 45 * (SELECT price FROM tariffs WHERE service_id = 5), 'PayPal', 'Paid', NOW());  

-- різні види запитів
SELECT * FROM users;

SELECT * FROM payments
WHERE status = 'Paid'
ORDER BY amount;

SELECT user_id, SUM(amount) AS total_amount
FROM payments
GROUP BY user_id
HAVING SUM(amount) > 49;

SELECT payments.id AS payment_id, 
       users.name AS user_name, 
       services.name AS service_name, 
       payments.amount, 
       payments.payment_date
FROM payments
INNER JOIN users ON payments.user_id = users.id
INNER JOIN services ON payments.service_id = services.id
ORDER BY payments.payment_date DESC;

SELECT DISTINCT name FROM services;

SELECT MAX(amount) AS max_payment, MIN(amount) AS min_payment FROM payments;

SELECT AVG(payment_count) AS avg_payments_per_user
FROM (
    SELECT user_id, COUNT(id) AS payment_count 
    FROM payments 
    GROUP BY user_id
) AS user_payments;

SELECT SUM(amount) FROM payments;

-- відпвідь на запитання
-- Скільки мешканців оплатили комунальні послуги в цьому місяці?
SELECT COUNT(DISTINCT user_id) AS paid_users
FROM payments
WHERE status = 'Paid' 
AND EXTRACT(MONTH FROM payment_date) = EXTRACT(MONTH FROM CURRENT_DATE)
AND EXTRACT(YEAR FROM payment_date) = EXTRACT(YEAR FROM CURRENT_DATE);

-- Яка середня сума комунальних платежів за місяць?
SELECT EXTRACT(YEAR FROM payment_date) AS year,
       EXTRACT(MONTH FROM payment_date) AS month,
       AVG(amount) AS avg_monthly_payment
FROM payments
WHERE status = 'Paid'
GROUP BY year, month
ORDER BY year DESC, month DESC;

-- Які мешканці мають заборгованість по оплаті?
SELECT users.name
FROM payments
INNER JOIN users ON payments.user_id = users.id
WHERE payments.status = 'Unpaid'
GROUP BY users.name;

-- Які записи містять інформацію про повернення коштів?
SELECT * 
FROM payments
WHERE status = 'refunded';

-- Яка кількість оплат була здійснена через онлайн-методи?
SELECT COUNT(*) AS online_payments_count
FROM payments
WHERE payment_method IN ('credit_card', 'paypal', 'bank_transfer');

-- Які послуги були найбільше оплачені?
SELECT services.name, SUM(payments.amount) AS total_amount_paid
FROM payments
INNER JOIN services ON payments.service_id = services.id
WHERE payments.status = 'paid'
GROUP BY services.name
ORDER BY total_amount_paid DESC;

-- Яка сума загальних платежів по кожній категорії послуг?
SELECT services.name AS service_name, SUM(payments.amount) AS total_amount
FROM payments
INNER JOIN services ON payments.service_id = services.id
GROUP BY services.name
ORDER BY total_amount DESC;
